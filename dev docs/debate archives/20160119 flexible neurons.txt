
CONSIDER: Neurons subsuming jumper functionality.
	Am I really happy with the distinction between neurons and jumpers? Have 'instant' neurons or 'OR input' jumpers?
	
	PROP: neurons can have 'delay' and 'numbers' as optional modules. Or properties that invisibly default to off.
		'Numbers' allows wire input weights and the threshold to be set (otherwise they all invisibly default to 1). Cosmetic difference only?
		'Delay' could either be a separate device with only that role, OR a neuron augmentation OR just a property of all neurons that defaults to off. Again Cosmetic difference only?

		PROP:
			Neurons that have all weights and thresholds as 1 are displayed with a more simple graphic.
			Neurons that have delay set to ON are drawn with a large bulb on the end.
		
		OBS: The two-segment neuron idea would fit into this nicely: The neuron itself can be coloured according to the calculated firing state while the delay bulb can be coloured according to the stored firing state.
		OBS: Old XML can be automatically converted to new (though there'll be loads more delay bulbs than necessary).
		
		CONSIDERATION: Implementing the charge propagation.
		Current Imp:
			PHASE ACT:
				(Push Inputs)
				Neuron - PushCharge
			PHASE CALC:
				Neuron - Sum charges to calculate firing bool
			ReceiveCharge:
				Neuron - add charge to receivedTotal
				Jumper - immediately calls PushCharge
		
		New Imp:
			PHASE ACT:
				Neuron - if (have bulb) PushCharge(bulbCharge); FireIfReady();
					<All inputless outputers (outergame inputs, neurons with no inputs, neurons delay bulbs) will respond with a PushCharge>
			PHASE CALC:
				Neuron - if (have bulb) bulb.adopt(); receivedChargeNum = 0; receivedChargeTotal = 0;
					<The charge of Neuron bulbs must not be changed during the main phase. Instead the next value of the bulb should be silently passed in. This value is then adopted in a separate phase>
			Neuron::FireIfReady() if (received all) { if (hasbulb) nextBulbCharge = charge, else pushCharge() };
			Neuron::ReceiveCharge() will store the accumulated total charge (as it does now) but also store the accumulated number of charges it has received.
				Each call, it checks if it has received from all its input wires and if so, it calculates its firing state by comparing the total received against the threshold and then propagates that firing state.

		Refresh Imp:
			Two "harmless" (as in, can be called excessively without negative consequence) functions - Refresh() and GetOutgoingCharge() - allow updating of non-time-dependent charges.
			Refresh() is called on "consequent" (to the right) elements to tell them they may have been affected by a change.
			GetOutgoingCharge() is used by refreshed elements and is called on their "antecedent" (to the left) elements to get data for the purposes of refreshment calculations.
			Refresh() can be freely called whenever a device is modified, etc. to allow instant charges to be immediately reflected.
			The only time-dependent activity is when Neuron delay bulbs use the "calc" and "act" phases just to update themselves and the brain xputs are changed.

			OBS: Cyclic dependencies of fast neurons will cause affected neurons to never fire. Maybe check for this and highlight it to the user. Simple to check, just iterate thru every device at the end of a tick and they should all have fired.
				OBS: Oh wow. The refresh system makes this not be a problem. Cool!
			OBS: Sending a 'false' charge is now very different from not sending any charge. Devices rely on counting all charges (including 'false') to know they are ready to calculate their own state.
		
	CONSIDERATION: Will feedback to the player about how the system is operating be better under the new or old way?
		CONC: The new way since it is a superset of the options available in the old way.
