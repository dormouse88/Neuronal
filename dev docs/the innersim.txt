
CONSIDER: Multichannel wires.
	To link multiple outputs of one plan to multiple inputs of another, user has to add multiple jumpers. That's not great. Also can't connect a neuron to multiple inputs or outputs without intermediary neurons.

	PROP:
		Wires are normal (single). wire selection is normal (single).
		Wiring plans can only happen when they are exploded, through selection of 'sockets' along the side. These are pseudo devices that are provided so there is always one spare.
		That solves everything!
		
			OBS: Although wiring and dewiring cannot occur when a plan is desploded, wires should maybe be drawn differently and multiple wires should be indicated.

			CONSIDERATION: Are sockets wired in?
				PROP: No!
			
			CONSIDERATION: Are sockets neurons? Do they 'OR' inputs or disallow multiple inputs?
				OPTION 1)
					Sockets are like jumpers and won't allow more than 1 input. They instantly pass on their charge.
				OPTION 2)
					Sockets are like default neurons and cannot have numbers or delay bulbs. This way they have 'OR' behaviour and so allow multi-in and multi-out which makes wiring rules simpler.
					Under the old charge system, OR behaviour would interfere with charge propagation. It could work under the new mostly-fast neuron system though, ... right?
					OBS: Unfortunately sockets will need state to remember at least if they have fired, if not also their cumulative charge + num of charges.
						Perhaps this state could be in ChipHandle/ChipPlan?
						PROP:
							Store two map<int, Socket> in ChipHandle, one each for inputs and outputs. Sockets are like unwired default neurons. The only state these have is with regard to charge and don't need serialization.
							On each ChipHandle::ReceiveCharge(), ChipHandle calls the Socket with the corresponding slot to pass it the charge and ask if it is ready to compute its fire value. When it is ready, ChipHandle passes it on to the ChipPlan with the slot value as usual.
							On each ChipPlan::ReceiveCharge(), the plan passes the charge to ChipHandle using StepOut() as usual. ChipHandle then calls (informs+queries) the appropriate output Socket.
							That way ChipHandle can contain and manage the input and output sockets. ChipPlan stays oblivious to the change.
		CONSIDERATION:
			What does this proposition actually amount to?
				Loosening the wiring limitation
					from [wires must have a unique combination of: from, to]
					to   [wires must have a unique combination of: from, to, fromSlot, toSlot]
				OBS: This is how the system used to work, but I changed it to avoid the UI issue of wires on top of each other.

CONSIDER: Named Slots.
	OBS: Handle-to-plan slot matching could work with names just the same as it does with numbers.
		When a charge is passed across plan/handle divide, the system currently looks for an exact match (slot 5 sends a signal to slot 5) on an int variable. This could just as easily be a string instead.
	OBS: An auto-name system like when saving plans could be used.
		When a new slot is created (by adding a wire) it is currently assigned the first available int. This could be made to be the first available capital letter instead (A,B,C,AB,AC,etc). This would provide an easy default value and also allow for a single, simple mechanic (just matching on exact string equality). Note that unlike with plan naming, "auto names" should not be denoted by a special symbol and are effectively not differentiated from real names.
	OBS: A plan/handle complex will draw a single interface "array" of slots. The slots in this array will be the union of the slots on the handle and the plan (sorted alphabetically).
	OBS: Interface: There must be a novel string input control. Controls to cycle up/down the slots are optional (if provided, the "end" could be the first available capital letter).
	OBS: Drawing: I guess having a fairly low maximum character limit is necessary to not take up too much space. Unless I use tooltips or something (nah).




