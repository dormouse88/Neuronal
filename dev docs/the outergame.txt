
ENTITIES AND LEVELS:
	How to make certain level configurations?
		Randomly placed holes in walls?
			Wall has a plan that detects once on first tick and moves forward (until OOB) upon detection. A perpendicular moving cat with greater (random) headstart is the detected entity. It also moves OOB.
		Scents??
			Perhaps can't be placed directly by level designer? Must be marked by a cat with appropriate plan.
			
	Interaction rules:
		Timing:
			An oncoming MOUSE and CAT-ACTIVE would pass thru each other if even number of spaces between them!
				One option would be to: Change Logic sequence so CAT and MOUSE have alternate turns rather than simultaneous? Then test Interactions after either turn.
				However, it seems to be that this case is a specific problem and that generally, simultaneous actions are correct. I've implemented a check for this specific situation instead.
		Killing:
			OOB kills anything.
			CAT kills MOUSE.
		Detection:
			Whiskers detect all adjacent CAT blocks.
			Ears detect movement within certain radius.
		Termination:
			MOUSE Dies (Lose)
			MOUSE Touches GOAL (Win)
		CATS meet GOAL:
			Cats could optionally sit on goals (using goal detection or level design tricks) as a mechanism for fucking them up. This makes CAT-GOAL collisions level-determined and don't have to be a fundamental mechanic.
		
	Maybe a big distinction between different PLANs? Not such a strong distinction between STATICs and CATs?
		ENTITY	CAT		DUMB		 		No plan , Spawns at collapsed value. 
		ENTITY	CAT		FREEZING 			Has plan, Spawns at collapsed value. Freezes in place at t = 0!
		ENTITY	CAT		ACTIVE	 			Has plan, Spawns at collapsed value.
		ENTITY	MOUSE 						Has plan, Spawns at zero.
		OBS: DUMB is just a cosmetic type of CAT when there is no plan assigned.
		OBS: FREEZING is best as a boolean property of CAT
	


STEP BUTTONS:
	Transitions:
		DeSpecced:
			Spec
			Test / Cancel
		Specced:
			DeSpec
			Reset
			Step (inner+outer)
			Play (inner+outer&to-Prep+to-End) / Stop
	States:
		DeSpecced		Spec->Sp
			DeSp		Test->Testing
			*Testing*	Cancel->Paused		(fail)->Ended		(pass)->Victory
		Specced			DeSpec->DeSp		Reset->Sp
			Sp			Step->Paused		Play->Playing
			Paused		Step->Paused/Ended	Play->Playing
			*Playing*	Stop->Paused		(end)->Ended
			Ended

	Test/Cancel Test
	Reset
	Step Outer
	Step Inner
	Play Outer/Pause
	Play Inner/Pause
	Specify Level
	De-Specify Level

DONT FORGET:
	ear detection: detects presence of cats (moving only?) in a certain radius


