
ENTITIES AND LEVELS:
	How to make certain level configurations?
		Randomly placed holes in walls?
			Wall has a plan that detects once on first tick and moves forward (until OOB) upon detection. A perpendicular moving cat with greater (random) headstart is the detected entity. It also moves OOB.
		Scents??
			Perhaps can't be placed directly by level designer? Must be marked by a cat with appropriate plan.
			
	Interaction rules:
		Timing:
			An oncoming MOUSE and CAT-ACTIVE would pass thru each other if even number of spaces between them!
				One option would be to: Change Logic sequence so CAT and MOUSE have alternate turns rather than simultaneous? Then test Interactions after either turn.
				However, it seems to be that this case is a specific problem and that generally, simultaneous actions are correct. I've implemented a check for this specific situation instead.
		Killing:
			OOB kills anything.
			CAT kills MOUSE.
		Detection:
			Whiskers detect all adjacent CAT blocks.
			Ears detect movement within certain radius.
		Termination:
			MOUSE Dies (Lose)
			MOUSE Touches GOAL (Win)
		CATS meet GOAL:
			Cats could optionally sit on goals (using goal detection or level design tricks) as a mechanism for fucking them up. This makes CAT-GOAL collisions level-determined and don't have to be a fundamental mechanic.
		
	Maybe a big distinction between different PLANs? Not such a strong distinction between STATICs and CATs?
		ENTITY	CAT		DUMB		 		No plan , Spawns at collapsed value. 
		ENTITY	CAT		FREEZING 			Has plan, Spawns at collapsed value. Freezes in place at t = 0!
		ENTITY	CAT		ACTIVE	 			Has plan, Spawns at collapsed value.
		ENTITY	MOUSE 						Has plan, Spawns at zero.
		OBS: DUMB is just a cosmetic type of CAT when there is no plan assigned.
		OBS: FREEZING is best as a boolean property of CAT
	

SPECIFYING:
	Fixed subset of specification possibilities:
		A pseudo-random set of possible tests is derived from each suite (using a RNG with fixed seed probably).
		This set is fixed and is like a hash of the suite (this set can be the full range of possibilities when that range isn't too big).
		Each member of this fixed set is tested comprehensively. This ensures testing of a given suite provides a consistent outcome.
		(Note that if pressing the 'specify' button (truly) randomly chooses a specification from this subset, this is nothing to do with testing so is no problem)

STEP BUTTONS:
	States:
		STATE			TRANSITION_NAME->TARGET_STATE
		De-Ready		Spec	->Sp-Stopped	Test	->De-Testing
		De-Testing		Cancel	->De-Ready		(fail)	->Sp-Stopped	(pass)	->De-Victory
		De-Victory		
		Sp-Stopped		DeSpec	->De-Ready		Step	->nochange		Play	->Playing		Reset	->nochange
		Sp-Playing		Stop	->Stopped		(end)	->Stopped

	Transitions/Actions/Buttons:
		TRANSITION									AVAILABLE_IN
		Spec										DeSpecced
		Test / Cancel								DeSpecced
		DeSpec										Specced
		Reset										Specced
		Step (inner+outer)							Specced
		Play (inner+outer&to-Prep+to-End) / Stop	Specced

	Playing vs Stepping:
		What is the actual difference between playing and stepping? Is an 'outer step' just 'playing' until that point?
		IDEA: Everything is playing. There are two significant properties - visual granularity (VG) + halting point (HP).
			VG: Since all inner calculations need to be done regardless, VG is just whether inner 'steps' are drawn to the screen or not.
			HP: A versatile property that determines the condition when playing stops. Can be inner change, outer change, time zero, or end. Could have more options (eg. 10 outer changes).
			A Stop command perhaps uses the VG property to determine when stopping can occur. Or perhaps not (can stop an 'outer step' mid-way through?).

						OLD:
							States:
								DeSpecced		Spec->Sp
									DeSp		Test->Testing
									*Testing*	Cancel->Paused		(fail)->Ended		(pass)->Victory
									Specced		DeSpec->DeSp		Reset->Sp
									Sp			Step->Paused		Play->Playing
									Paused		Step->Paused/Ended	Play->Playing
									*Playing*	Stop->Paused		(end)->Ended
									Ended

							Test/Cancel Test
							Reset
							Step Outer
							Step Inner
							Play Outer/Pause
							Play Inner/Pause
							Specify Level
							De-Specify Level

DONT FORGET:
	ear detection: detects presence of cats (moving only?) in a certain radius


