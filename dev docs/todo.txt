Do Next
=======
Draw Xputs
Draw Arena Spawners + Entities better
Decide definite physics system (turn order, etc)
---v---

Sort question of assigning inputs/outputs to slots
Multichannel wires + flexible neurons


General
=======
	Finalize some good names for terms
	Why CPU load + Framerate loss when exploded?
Visual / Interface
==================
	Draw neurons as two halves with independent firing states. Change the neuron shape?
	Draw slot matching + valency (to show how many slots are ignored in both directions) between handles and chips.
	Set discrete zoom levels + use a smarter better centering algo (like googlemaps).
	Solve: No space to see wires between exploded chips when adjacent. Disallow adjacency? Draw plan boundary half a cell inwards? (changing GRID_SIZE doesn't help exploded chips)
	Make wire text labels circle-shaped and place them intelligently (on wire but close to device).
	Allow chip cycling while unexploded and draw name on the handle.
	Choose highest number plan to load into an empty plan, not lowest.
	Fix that device movement 'animation feature' so it doesn't trigger on plan loads.
	Plan Grabbers are unnecessary if using dedicated keys for collapse and expand. (doh)
	View centers in wrong place in both: 1 Plan collapse and 2 Plan Load/Wipe
	Add a reset all charge button.
	Add a collapse all/expand! all button.
	Add a device copy button? (useful for non-empty handles)
	Add an encapsulate button. This will put all devices (and their wires) within a rectangular area bounded by the cursors into a newly created sub-plan. Fucking groovy. May require multiwires.
	Make sure autoname symbol (@) doesn't get sorted between numbers and letters.
	Allow spaces or underscores in names.
	Add flashing insert cursor when entering text.

InnerSim
========
	Add in Plan Loading:
		db trimming,
		note attachments,
		read-only loading,
		containment tree traversal.
	CONSIDER: Neurons subsuming jumper functionality.
	CONSIDER: Multichannel wires?
	CONSIDER: Named slots?
		handle-to-plan slot matching could work with names just the same as it does with numbers (though refactoring would then be tricky). An auto-name system like when saving plans could be used.

OuterGame
=========



Not Commited
============
